

///Open images to analyze. 
//Goal: to open and process all images from a folder (i.e. all transects)

#@ File (label = "Input directory", style = "directory") input
//#@ File (label = "Output directory", style = "directory") output
#@ String (label = "File suffix", value = ".jpg") suffix


processFolder(input);

// function to scan folders/subfolders/files to find files with correct suffix
function processFolder(input) {

	//To hide operations
	setBatchMode(true); 

	
	list = getFileList(input);
	list = Array.sort(list);
	for (i = 0; i < list.length; i++) {
		if(File.isDirectory(input + File.separator + list[i]))
			processFolder(input + File.separator + list[i]);
		if(endsWith(list[i], suffix))
		//processFile(input, output, list[i]);
		processFile(input, list[i]);
	}
	setBatchMode(false); 
}

//function processFile(input, output, file) {
	function processFile(input, file) {
	 open (file);
	 a=getTitle();
print(a);

	 //duplicate for white pixel counting part
	 run("Duplicate...", "title=[white pixels]");
	
//Color thershold to select the red pixels in the image with a Tolerance of 50

// Color Thresholder 2.1.0/1.53c
// Autogenerated macro, single images only!

selectWindow (a);
min=newArray(3);
max=newArray(3);
filter=newArray(3);
//a=getTitle();
run("RGB Stack");
run("Convert Stack to Images");
selectWindow("Red");
rename("0");
selectWindow("Green");
rename("1");
selectWindow("Blue");
rename("2");
min[0]=205;
max[0]=255;
filter[0]="pass";
min[1]=0;
max[1]=50;
filter[1]="pass";
min[2]=0;
max[2]=50;
filter[2]="pass";
for (i=0;i<3;i++){
  selectWindow(""+i);
  setThreshold(min[i], max[i]);
  run("Convert to Mask");
  if (filter[i]=="stop")  run("Invert");
}
imageCalculator("AND create", "0","1");
imageCalculator("AND create", "Result of 0","2");
for (i=0;i<3;i++){
  selectWindow(""+i);
  close();
}
selectWindow("Result of 0");
close();
selectWindow("Result of Result of 0");
rename(a);

//Get number of black and white pixels on the image generated. 
//White pixels are the originally red (acúmulo) (2nd coluumn)
//Black pixels are all the rest (rest of orthophoto and background)
//***will need to substract the white background from the original image

getHistogram(values, counts, 2);
Array.print(counts);
 
//Close resulting image
selectWindow(a);
close();


//Color thershold to select the white pixels from the background in the image

// Color Thresholder 2.1.0/1.53c
// Autogenerated macro, single images only!

selectWindow ("white pixels");
min=newArray(3);
max=newArray(3);
filter=newArray(3);
//a=getTitle();
run("RGB Stack");
run("Convert Stack to Images");
selectWindow("Red");
rename("0");
selectWindow("Green");
rename("1");
selectWindow("Blue");
rename("2");
min[0]=254;
max[0]=255;
filter[0]="pass";
min[1]=254;
max[1]=255;
filter[1]="pass";
min[2]=254;
max[2]=255;
filter[2]="pass";
for (i=0;i<3;i++){
  selectWindow(""+i);
  setThreshold(min[i], max[i]);
  run("Convert to Mask");
  if (filter[i]=="stop")  run("Invert");
}
imageCalculator("AND create", "0","1");
imageCalculator("AND create", "Result of 0","2");
for (i=0;i<3;i++){
  selectWindow(""+i);
  close();
}
selectWindow("Result of 0");
close();
selectWindow("Result of Result of 0");
rename("white pixels");



// Colour Thresholding-------------

//Get number of black and white pixels on the image generated. 
//White pixels are the originally red (acúmulo) (2nd coluumn)
//Black pixels are all the rest (rest of orthophoto and background)
//***will need to substract the white bacground from the original image

getHistogram(values, counts, 2);
Array.print(counts);
 
//Close resulting image
selectWindow("white pixels");
close();

   
// Do the processing here by adding your own code.
	// Leave the print statements until things work, then remove them.
	//print("Processing: " + input + File.separator + file);
	//print("Saving to: " + output);
}


///Save excel with the data from the Log

output = getDirectory("Choose a directory to save the Data");
selectWindow ("Log");
saveAs("Text", output + "/Red Pixels" + ".xls");
   // close();


